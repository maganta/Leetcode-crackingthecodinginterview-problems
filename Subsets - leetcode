/**Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]*/


/**Time Complexity: O(n * 2 pow n)  Space Complexity: O(n * 2 pow n)*/









class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> l = new ArrayList<>();
        int n = nums.length;
        for(int i =0; i< (1<<n); i++){
            List<Integer> set = new ArrayList<>();
            for(int j=0; j< n; j++){
                if((i&(1<<j))!=0){
                    set.add(nums[j]);
                }
            }
            l.add(set);
        }        
        return l;
        
    }
}
