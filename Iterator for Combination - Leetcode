/**Design an Iterator class, which has:

A constructor that takes a string characters of sorted distinct lowercase English letters and a number combinationLength as arguments.
A function next() that returns the next combination of length combinationLength in lexicographical order.
A function hasNext() that returns True if and only if there exists a next combination.
 

Example:

CombinationIterator iterator = new CombinationIterator("abc", 2); // creates the iterator.

iterator.next(); // returns "ab"
iterator.hasNext(); // returns true
iterator.next(); // returns "ac"
iterator.hasNext(); // returns true
iterator.next(); // returns "bc"
iterator.hasNext(); // returns false
 */
 
 
 

class CombinationIterator {
    
    List<String> res = new ArrayList<>();
    int count =0;

    public CombinationIterator(String characters, int combinationLength) {
        char[] c = characters.toCharArray();
        for(int i=0; i< 1<<c.length; i++){
            StringBuffer sb = new StringBuffer();
            for(int j=0; j< c.length; j++){
                if((i &(1<<j))!=0){
                    sb.append(c[j]);
                    
                }
            }
            
            if(sb.toString().length()==combinationLength){
                res.add(sb.toString());
            }
        }
        Collections.sort(res);
    }
    
    public String next() {
        return res.get(count++);
    }
    
    public boolean hasNext() {
        return count>=res.size()?false:true;
    }
}

/**
 * Your CombinationIterator object will be instantiated and called as such:
 * CombinationIterator obj = new CombinationIterator(characters, combinationLength);
 * String param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */
