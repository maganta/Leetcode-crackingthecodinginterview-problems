/**Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. */





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
//recursive
class Solution {
    public int maxDepth(TreeNode root) {
        return root==null? 0: Math.max(maxDepth(root.left), maxDepth(root.right))+1;
        
    }
}
 
 
 
 //iterative
class Solution {
    public int maxDepth(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        
        if(root==null){
            return 0;
        }
        int depth=0;
        q.add(root);
        
        while(!q.isEmpty()){
            depth++;
            
            for(int i = q.size(); i>0;i--){
                TreeNode curr = q.remove();
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    q.add(curr.right);
                }
                
            }
        }
        return depth;
        
    }
}
