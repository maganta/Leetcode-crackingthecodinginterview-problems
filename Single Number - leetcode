/**Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1*/





/**Time complexity: O(n)*/

class Solution {
    public int singleNumber(int[] nums) {
      HashMap<Integer, Integer> map = new HashMap<>();
        
        
        for(int i=0; i<nums.length; i++){
            int count= 0;
            if(map.containsKey(nums[i])){
                map.put(nums[i], count++);
            }
            map.put(nums[i], count);
        }
        
        for(Integer k : map.keySet()){
            if(map.get(k)==0){
                return k;
            }
        }
         return 0;
        
        
    }
}
