/**Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.*/



/**TC: O(n), SC: O(1)*/



class Solution {
    public int maxSubArray(int[] nums) {
        int ma = nums[0];
          int sum =0;
        
        for(int i=0; i<nums.length; i++){
                sum = Math.max(sum+nums[i], nums[i]);
                ma = Math.max(sum, ma);
                
            
        }
        return ma;
        
    }
}
