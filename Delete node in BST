/** Given a root node reference of a BST and a key, delete the node with the given key in the BST. 
Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:
Search for a node to remove.
If the node is found, delete the node.*/





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        TreeNode curr = root;
        TreeNode parent = null;
        
        
        while(curr!=null && curr.val!=key){
            parent = curr;
            if(key <curr.val){
                curr= curr.left;
            }else{
                curr = curr.right;
            }
        }
        
        if(curr==null){
            return root;
        }
        
        if(curr.left == null && curr.right == null){
            if(curr!= root){
                if(parent.left==curr){
                    parent.left = null;
                }else{
                    parent.right = null;
                }
            }else{
                root = null;
            }
        }else if(curr.left!=null && curr.right!=null){
            TreeNode min = minimum(curr.right);
            deleteNode(root, min.val);
            curr.val = min.val;
        }else if(curr.left!=null && curr.right ==null){
            if(curr!=root){
                if(curr == parent.left){
                    parent.left = curr.left;
                }else{
                    parent.right = curr.left;
                }
            }else{
                root = curr.left;
            }
        }else if(curr.left==null && curr.right !=null){
            if(curr!=root){
                if(curr== parent.left){
                    parent.left = curr.right;
                }else{
                    parent.right = curr.right;
                }
            }else{
                root= curr.right;
            }
            
      
        }
        
        return root;
        
    }
    
     private  TreeNode minimum(TreeNode node){
            while(node.left!=null){
                node = node.left;
            }
            return node;
        }
    
    
    
    
    
}
