/**Design a HashSet without using any built-in hash table libraries.

To be specific, your design should include these functions:

add(value): Insert a value into the HashSet. 
contains(value) : Return whether the value exists in the HashSet or not.
remove(value): Remove a value in the HashSet. If the value does not exist in the HashSet, do nothing.
*/






/* O(n) time*/
class MyHashSet {

    ArrayList<Integer> a = new ArrayList<>();
    /** Initialize your data structure here. */
    public MyHashSet() {
        
    }
    
    public void add(int key) {
        if(a.contains(key)==false){
            a.add(key);
        }
        
    }
    
    public void remove(int key) {
        for(int i=0; i< a.size(); i++){
            if(a.get(i)== key){
                a.remove(i);
            }
        }
        
    }
    
    /** Returns true if this set contains the specified element */
    public boolean contains(int key) {
        return a.contains(key);
        
    }
}

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.add(key);
 * obj.remove(key);
 * boolean param_3 = obj.contains(key);
 */
 
 
 
 
 
 /*O(1)*/
 
 class MyHashSet {

   boolean[] a = new boolean[1000001];
    /** Initialize your data structure here. */
    public MyHashSet() {
        
    }
    
    public void add(int key) {
       
        a[key]=true;
    }
    
    public void remove(int key) {
       a[key]=false;
        
    }
    
    /** Returns true if this set contains the specified element */
    public boolean contains(int key) {
        return a[key]==true;
        
    }
}

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.add(key);
 * obj.remove(key);
 * boolean param_3 = obj.contains(key);
 */
