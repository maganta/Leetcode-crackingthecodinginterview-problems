/** Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

 

Example 1:

Given the following tree [3,9,20,null,null,15,7]:

    3
   / \
  9  20
    /  \
   15   7
Return true.
 */






/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        if(max(root)== -1){
            return false;
        }
        return true;
        
    }
    
    public int max(TreeNode n){
        if(n==null){
            return 0;
        }
        
        int left = max(n.left);
        int right = max(n.right);
        
        if(left== -1 || right== -1|| Math.abs(left-right)>1){
            return -1;
        }
        return Math.max(left, right)+1;
    }
    
    
}
