class MyCircularQueue {
    int[] queue;
    int head = 0;
    int tail = -1;
    int len = 0;

    /** Initialize your data structure here. Set the size of the queue to be k. */
    public MyCircularQueue(int k) {
        queue = new int[k];
        
        
    }
    
    /** Insert an element into the circular queue. Return true if the operation is successful. */
    public boolean enQueue(int value) {
       if(!isFull()){
           tail = (tail+1) % queue.length;
           queue[tail] = value;
           len++;
           return true;
       }else{
        return false;
       }
    }
    
    /** Delete an element from the circular queue. Return true if the operation is successful. */
    public boolean deQueue() {
       if(!isEmpty()){
           head = (head+1)% queue.length;
           len--;
           return true;
       }else{
        return false;
       }
        
    }
    
    /** Get the front item from the queue. */
    public int Front() {
        if(!isEmpty()){
            return queue[head];
        }
        return -1;
        
    }
    
    /** Get the last item from the queue. */
    public int Rear() {
       if(!isEmpty()){
           return queue[tail];
       }
        return -1;
        
    }
    
    /** Checks whether the circular queue is empty or not. */
    public boolean isEmpty() {
        return len==0;
    }
    
    /** Checks whether the circular queue is full or not. */
    public boolean isFull() {
        return len == queue.length;
        
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
