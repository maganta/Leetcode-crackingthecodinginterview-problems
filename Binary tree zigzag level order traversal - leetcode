/** Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
] */









/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        if(root==null){
            return res;
        }
        
        
        q.add(root);
        boolean rev = false;
        
        while(!q.isEmpty()){
            int len= q.size();
            List<Integer> a = new ArrayList<>();
            for(int i=0; i<len; i++){
                TreeNode curr = q.poll();
                
                if(!rev)
                 a.add(curr.val);
                else
                    a.add(0,curr.val);
            
                     if(curr.left!=null){
                    q.add(curr.left);
                    }
                    if(curr.right!=null){
                    q.add(curr.right); 
                    }
                
            }
            res.add(a);
            rev = !rev;
           
        }
        return res;
        
    }
}
