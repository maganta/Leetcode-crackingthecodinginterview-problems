/**In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

 

Example 1:



Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.
*/




/*Time complexity: O(rows * columns)*/
class Solution {
    class Position{
        int x;
        int j;
        Position(int x, int y){
            this.x = x;
            this.j = y;
        }
    }
    
    
    public int orangesRotting(int[][] grid) {
        Queue<Position> q = new LinkedList<>();
        int total =0, rotten=0; int time=0;
        
        for(int i=0; i< grid.length; i++){
            for(int j =0; j<grid[0].length; j++){
                if(grid[i][j]== 1 || grid[i][j]==2){
                    total++;
                }
                if(grid[i][j]==2){
                        q.add(new Position(i, j));
                }
            }
        }
        
        if(total==0){
            return 0;
        }
        
        while(!q.isEmpty() && rotten < total ){
            int size = q.size();
            rotten = rotten + size;
           
            if(total==rotten){
                return time;
            }
             time++;
            for(int i = 0; i< size; i++){
                Position p = q.remove();
                
                if(p.x+1<grid.length && grid[p.x+1][p.j]==1){
                    grid[p.x+1][p.j]=2;
                     q.add(new Position(p.x+1, p.j));
                }
                if(p.x-1>=0 && grid[p.x-1][p.j]==1){
                    grid[p.x-1][p.j]=2;
                     q.add(new Position(p.x - 1, p.j));
                }
                 
                 if(p.j-1>=0 && grid[p.x][p.j-1]==1){
                    grid[p.x][p.j-1]=2;
                     q.add(new Position(p.x, p.j-1));
                }
                 if(p.j+1<grid[0].length && grid[p.x][p.j+1]==1){
                    grid[p.x][p.j+1]=2;
                     q.add(new Position(p.x, p.j+1));
                }
                
            }
        }
        
       return -1; 
          
    }
}
