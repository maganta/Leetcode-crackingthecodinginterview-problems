/** There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
 

Constraints:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
1 <= numCourses <= 10^5 */






/** Time and space O(V+E) */
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Queue<Integer> q = new LinkedList<Integer>();
        int[] indegree = new int[numCourses];
        int count=0;
        Map<Integer, List<Integer>> adj = new HashMap<Integer, List<Integer>>();
        
        for(int i=0; i<prerequisites.length; i++){
            int source = prerequisites[i][1];
            int dest = prerequisites[i][0];
            List<Integer> lst = adj.getOrDefault(source, new ArrayList<>());
            lst.add(dest);
            adj.put(source, lst);
            indegree[dest]= indegree[dest]+1;
            
        }
        
        for(int i=0; i<numCourses; i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        
        while(!q.isEmpty()){
            int n = q.remove();
            count++;
            if(adj.containsKey(n)){
            for(Integer child : adj.get(n)){
                indegree[child]--;
                
                if(indegree[child]==0){
                    q.add(child);
                }
            }
        }
            
        }
         if(count==numCourses){
                return true;
            }
        return false;
    }
}
