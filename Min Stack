Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.


class MinStack {
   List<Integer> data;
    ArrayList<Integer> minStack = new ArrayList<>();

    /** initialize your data structure here. */
    public MinStack() {
    
        data = new ArrayList<>();
    }
    
    public void push(int x) {
        data.add(x);
        if(minStack.size() !=0){          
            if(x<=minStack.get(minStack.size()-1)){
                minStack.add(x);
            }
        }else{
            minStack.add(x);
        }
        
        
    }
    
    public void pop() {
        int x = data.remove(data.size()-1); 
        if(minStack.size() !=0){
            if(x == minStack.get(minStack.size()-1)){
                minStack.remove(minStack.size()-1);
            }   
        }
        
    }
    
    public int top() {
        return data.get(data.size()-1);
        
    }
    
    public int getMin() {
        return minStack.get(minStack.size()-1);
        
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
