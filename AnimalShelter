
/** An animal shelter, which holds only dogs and cats, operates
 * on a strictly "first in, first out" basis. People must adopt
 * either the "oldest" (based on arrival time) of all animals at
 * the shelter, or they can select whether they would prefer a dog
 * or a cat (and will receive the oldest animal of that type). They
 * cannot select which specific animal they would like. Create a data
 * structure to maintain this system and implement operations such as
 * enqueue, dequeueAny, dequeueDog and dequeueCat. You may use the
 * built in linked list data structure. */

// "static void main" must be defined in a public class.
abstract class Animal{
    int order;
    String name;
    public Animal(String n){
        this.name = n;
    }
    public void setOrder(int o){
        order = o;
    }
    public int getOrder(){
        return order;
    }
    public boolean isOlderThan(Animal a){
        return this.order<a.getOrder();
    }
}

public class Dog extends Animal{
    public Dog(String n){
        super(n);
    }
}
public class Cat extends Animal{
    public Cat(String n){
        super(n);
    }
}
public class AnimalShelter {
    Queue<Dog> dogs = new LinkedList<Dog>();
    Queue<Cat> cats = new LinkedList<Cat>();
    int ord = 0;
    
    public void enqueue(Animal a){
        a.setOrder(ord);
        ord++;
        if(a instanceof Dog){
            dogs.add((Dog)a);
        }else if(a instanceof Cat){
            cats.add((Cat)a);
        }
    }
    
    public Animal dequeueAny(){
        if(dogs.size()==0){
            return dequeueCats();
        }else if(cats.size()==0){
            return dequeueDogs();
        }else{
            Dog dog = dogs.peek();
            Cat cat = cats.peek();
            if(cat.isOlderThan(dog)){
                return dequeueCats();
            }
            return dequeueDogs();
        }
       
    }
    
    
     public Animal dequeueCats(){
       return cats.remove();
       
    }
    
     public Animal dequeueDogs(){
       return dogs.remove();
       
    }
      
}
