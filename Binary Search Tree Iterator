/** Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST. */




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class BSTIterator {
    Stack<TreeNode> s = new Stack<>();
    List<Integer> result = new ArrayList<>();
    int index = -1;

    public BSTIterator(TreeNode root) {
        insertion(root);
    }
    
    private void insertion(TreeNode root){
        while(!s.isEmpty() || root!=null){
            while(root!=null){
                s.push(root);
                root = root.left;
            }
            TreeNode curr = s.pop();
            result.add(curr.val);
            root = curr.right;
            
        }
    }
    
    /** @return the next smallest number */
    public int next() {
        return result.get(++index);
        
    }
    
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        if(this.index+1<result.size()){
            return true;
        }
        return false;
        
    }
}

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator obj = new BSTIterator(root);
 * int param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */
