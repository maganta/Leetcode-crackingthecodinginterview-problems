/**Given a string s, return the longest palindromic substring in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
Example 3:

Input: s = "a"
Output: "a"
Example 4:

Input: s = "ac"
Output: "a"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters (lower-case and/or upper-case),*/










class Solution {
    int min=0, maxLength=0, max=0;
    public String longestPalindrome(String s) {
        int len = s.length();
        
        if(len<2){
            return s;
        }
        
        for(int i=0; i<len; i++){
            extend(s, i, i);
            extend(s, i, i+1);
        }
        return s.substring(min+1, max);
        
        
        
    }
    
    
    
    public void extend(String s, int j, int k){
        while(j>=0 && k<s.length() && s.charAt(j)==s.charAt(k)){
            j--;
            k++;
        }
        if(maxLength<(k-j+1)){
            min=j;
            max = k;
            maxLength = k-j+1;
            
        }
    }
}
