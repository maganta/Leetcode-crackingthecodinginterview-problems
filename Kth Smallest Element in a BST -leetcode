/** Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

 

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
 */





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        Stack<TreeNode> s = new Stack<>();
        List<Integer> res = new ArrayList<>();
        
        while(!s.isEmpty() || root!=null){
        while(root!=null){
            s.push(root);
            root= root.left;
        }
            TreeNode curr = s.pop();
            res.add(curr.val);
            if(curr.right!=null){
                root = curr.right;
            }
             if(res.size()==k){
                return res.get(k-1);
            }
            
        }
        return res.get(k-1);
        
    }
}
